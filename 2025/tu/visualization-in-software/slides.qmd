---
title: "Visualization in Software"
format:
  revealjs:
    theme: serif
jupyter: python3
self-contained: true
---

# Prelude

---

## Jonathan Llovet

:::: {.columns}

::: {.column width="80%"}

- Software Engineer, Linguist, Philosopher
:::

::: {.column width="20%"}
![](https://avatars.githubusercontent.com/u/36782355?v=4)

[jllovet.com](jllovet.com)

:::

::::

---

## Jonathan Llovet

:::: {.columns}

::: {.column width="80%"}

School

- BA from St. John's College, studied Philosophy and History of Math and Science
- Enrolled in MS in CS at Towson University
- Summer Language School in Hebrew at Middlebury University
- Coursework at Indiana Univ. East in Math
- Other language programs - classical and modern

:::

::: {.column width="20%"}
![](https://avatars.githubusercontent.com/u/36782355?v=4)

[jllovet.com](jllovet.com)

:::

::::
---

## Jonathan Llovet

:::: {.columns}

::: {.column width="80%"}

Work

- Solutions Architect and Cybersecurity Manager at *Inspire Brands*
- Founder and CEO of *Opening Questions*, where I'm building a language learning app for Ancient Greek called *Talk with Albert*
- Formerly worked as a consultant in Identity and Access Management
- Writing a book on Philosophy of Computer Science: *Algorithmics - The Being of Becoming*

:::

::: {.column width="20%"}
![](https://avatars.githubusercontent.com/u/36782355?v=4)

[jllovet.com](jllovet.com)

:::

::::

# Why Talk About Visualization?

# What is Computation?

---

## Application of Algorithmics

::: {.fragment }
- Study of change and becoming, sister of calculus
:::

::: {.fragment }
- Transformation of initial state to a subsequent state
:::

::: {.fragment }
- Sometimes with side effects
:::

---

## Modeling and Analogy
::: {.fragment }
- Exploration (Questions & Discussions)
:::
::: {.fragment }
- Instrumentalization (Means to an End)
:::
::: {.fragment }
- Commodification (Product)
:::

---

At their core:

::: {.fragment }
- Communication and Collaboration
:::

We should be concerned with:

::: {.fragment }
- Rhetoric
- Effective Presentation
:::

---

## Our Audiences

::: {.fragment }
- The Computer
:::
::: {.fragment }
- Other Software Engineers
:::
::: {.fragment }
- Colleagues
:::
::: {.fragment }
- Customers
:::
::: {.fragment }
- Ourselves
:::


---

## Effective Communication

::: {.fragment }
- Fundamental aspects of our cognition:
  - Space and Time
:::

::: {.fragment }
- Frame communication around these

  ::: {.fragment }
  - Allow audience to explore concepts spatially
  :::
  ::: {.fragment }
  - Tell a story
  :::
:::


# Enter, Graphviz

---

## Hello, Graphviz!
:::: {.columns}

::: {.column width="40%"}
```dot
digraph g {
  a -> b
}
```
```{dot}
//| fig-height: 4
//| fig-width: 4
digraph g {
  a -> b
}
```
:::

::: {.column width="60%"}
- Declarative graph-generation
- Plain text files ending in .dot
- Processed by CLI or another tool
:::

::::

---

## Hello, Graphviz!
:::: {.columns}

::: {.column width="40%"}
```dot
digraph g {
  rankdir=LR
  a -> b
}
```
```{dot}
//| fig-height: 4
//| fig-width: 4
digraph g {
  rankdir=LR
  a -> b
}
```
:::

::: {.column width="60%"}
- Easy modification and iteration
- Effective for collaboration
- [VSCode Plugin](https://github.com/joaompinto/vscode-graphviz) for live updates
:::

::::

---

## Graphviz Resources

- [Graphviz: graphviz.org/download](https://graphviz.org/download/)
- [VSCode: github.com/joaompinto/vscode-graphviz](https://github.com/joaompinto/vscode-graphviz)
- [Docs: graphviz.org](https://graphviz.org/)
- [Gitlab: gitlab.com/graphviz/graphviz](https://gitlab.com/graphviz/graphviz)

---

## Basic Usage

`mygraph.dot`
```dot
digraph g {
  a -> b
}
```

Generate a PNG
```shell
dot -Tpng mygraph.dot -o mygraph.png
```

Scale the PNG
```shell
dot -Tpng mygraph.dot -s=10 -o mygraph.png
```

Export to SVG
```shell
dot -Tsvg mygraph.dot -o mygraph.svg
```

---

## Nodes

---

## Edges

---

## Subgraphs

---

### A Reprise on Rhetoric and Storytelling

::: {.fragment }
- Use analogies from reading
- Weak form of Sapir Whorf
- Majority of world languages
  - (notable exceptions: Hebrew, Arabic)
::: 

Structure Narrative

::: {.fragment }
- Left-to-Right
- Top-to-Bottom
- Clockwise
:::

---

## Styling

---

## Challenges Presented by Styling

- Analogous to CSS
- No built-in variable support

---

CSS
```css
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}
```

SCSS
```scss
$font-stack: Helvetica, sans-serif;
$primary-color: #333;

body {
  font: 100% $font-stack;
  color: $primary-color;
}
```

Source: [SCSS Documentation](https://sass-lang.com/guide/)

---

## React Native

```typescript
import React from 'react';
import {StyleSheet, Text} from 'react-native';
import {
  SafeAreaView,
  SafeAreaProvider
} from 'react-native-safe-area-context';

const App = () => (
  <SafeAreaProvider>
    <SafeAreaView style={styles.container}>
      <Text style={styles.title}>React Native</Text>
    </SafeAreaView>
  </SafeAreaProvider>
);

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 24,
    backgroundColor: '#eaeaea',
  },
  title: {
    marginTop: 16,
    paddingVertical: 8,
    borderWidth: 4,
    borderColor: '#20232a',
    borderRadius: 6,
    backgroundColor: '#61dafb',
    color: '#20232a',
    textAlign: 'center',
    fontSize: 30,
    fontWeight: 'bold',
  },
});

export default App;
```
Source: [React Native Docs - Stylesheet](https://reactnative.dev/docs/stylesheet)

---

## Possible Solutions

### IDE Snippets

- [VSCode User Defined Snippets](https://code.visualstudio.com/docs/editing/userdefinedsnippets)

---

![VSCode Open Configure Snippets](vscode-open-configure-snippets.png)

---

![VSCode Open Snippets File](vscode-open-snippets-file.png)

---

![VSCode Snippet Graph Template](vscode-snippet-graph-template.png)

---

![VSCode Snippet Cluster Colors](vscode-snippet-cluster-colors.png)

---

### Preprocessors

- Write a script in a lightweight language like
  - Bash
  - Perl
  - Python

---

### More Robust Solutions

- Wrappers in other languages
  - Python
  - Go
  - Javascript

## Uses and Integration with Tools

- Read from DB to Dynamically Generate Graphs
- Integrate into documentation
- Real-time collaboration

Add to

- READMEs
- Plain-Text Knowledge Management Systems

---

## Obsidian

- Knowledge management system built-around plain-text
- Uses text processing of markdown files
- [https://obsidian.md/](https://obsidian.md/)

---

![Obsidian Inline Graphviz](obsidian-inline-graphviz.png)

---

![Obsidian Community Plugins - Graphviz](obsidian-community-plugins-graphviz.png)

---

![Obsidian Graph View](obsidian-graph-view.png)

---

![Obsidian Graph View - Filtered to Tag](obsidian-graph-view-filtered-to-tag.png)

# Other Visualizations

# Enter, Mermaid

---

## Hello, Mermaid

- Other visualization tasks
- Frequent native support in Markdown tools
- Different rendering style, implications for complicated graphs

---

## Example: Sequence Diagrams
- Sequence diagrams

---

![Obsidian Inline Mermaid](obsidian-inline-mermaid.png)
