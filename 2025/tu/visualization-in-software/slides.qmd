---
title: "Visualization in Software"
format:
  revealjs:
    theme: serif
jupyter: python3
self-contained: true
---

# Prelude

---

## Jonathan Llovet

:::: {.columns}

::: {.column width="80%"}

- Software Engineer, Linguist, Philosopher
:::

::: {.column width="20%"}
![](https://avatars.githubusercontent.com/u/36782355?v=4)

[jllovet.com](jllovet.com)

:::

::::

---

## Jonathan Llovet

:::: {.columns}

::: {.column width="80%"}

School

- BA from St. John's College, studied Philosophy and History of Math and Science
- Enrolled in MS in CS at Towson University
- Summer Language School in Hebrew at Middlebury University
- Coursework at Indiana Univ. East in Math
- Other language programs - classical and modern

:::

::: {.column width="20%"}
![](https://avatars.githubusercontent.com/u/36782355?v=4)

[jllovet.com](jllovet.com)

:::

::::
---

## Jonathan Llovet

:::: {.columns}

::: {.column width="80%"}

Work

- Solutions Architect and Cybersecurity Manager at *Inspire Brands*
- Founder and CEO of *Opening Questions*, where I'm building a language learning app for Ancient Greek called *Talk with Albert*
- Formerly worked as a consultant in Identity and Access Management
- Writing a book on Philosophy of Computer Science: *Algorithmics - The Being of Becoming*

:::

::: {.column width="20%"}
![](https://avatars.githubusercontent.com/u/36782355?v=4)

[jllovet.com](jllovet.com)

:::

::::

# Why Talk About Visualization?

# What is Computation?

---

## Application of Algorithmics

::: {.fragment }
- Study of change and becoming, sister of calculus
:::

::: {.fragment }
- Transformation of initial state to a subsequent state
:::

::: {.fragment }
- Sometimes with side effects
:::

---

## Modeling and Analogy
::: {.fragment }
- Exploration (Questions & Discussions)
:::
::: {.fragment }
- Instrumentalization (Means to an End)
:::
::: {.fragment }
- Commodification (Product)
:::

---

At their core:

::: {.fragment }
- Communication and Collaboration
:::

We should be concerned with:

::: {.fragment }
- Rhetoric
- Effective Presentation
:::

---

## Our Audiences

::: {.fragment }
- The Computer
:::
::: {.fragment }
- Other Software Engineers
:::
::: {.fragment }
- Colleagues
:::
::: {.fragment }
- Customers
:::
::: {.fragment }
- Ourselves
:::


---

## Effective Communication

::: {.fragment }
- Fundamental aspects of our cognition:
  - Space and Time
:::

::: {.fragment }
- Frame communication around these

  ::: {.fragment }
  - Allow audience to explore concepts spatially
  :::
  ::: {.fragment }
  - Tell a story
  :::
:::


# Enter, Graphviz

---

## Hello, Graphviz!
:::: {.columns}

::: {.column width="40%"}
```dot
digraph g {
  a -> b
}
```
```{dot}
//| fig-height: 4
//| fig-width: 4
digraph g {
  a -> b
}
```
:::

::: {.column width="60%"}
- Declarative graph-generation
- Plain text files ending in .dot
- Processed by CLI or another tool
:::

::::

---

## Hello, Graphviz!
:::: {.columns}

::: {.column width="40%"}
```dot
digraph g {
  rankdir=LR
  a -> b
}
```
```{dot}
//| fig-height: 4
//| fig-width: 4
digraph g {
  rankdir=LR
  a -> b
}
```
:::

::: {.column width="60%"}
- Easy modification and iteration
- Effective for collaboration
- [VSCode Plugin](https://github.com/joaompinto/vscode-graphviz) for live updates
:::

::::

---

## Graphviz Resources

- [Graphviz: graphviz.org/download](https://graphviz.org/download/)
- [VSCode: github.com/joaompinto/vscode-graphviz](https://github.com/joaompinto/vscode-graphviz)
- [Docs: graphviz.org](https://graphviz.org/)
- [Gitlab: gitlab.com/graphviz/graphviz](https://gitlab.com/graphviz/graphviz)

---

## Basic Usage

`mygraph.dot`
```dot
digraph g {
  a -> b
}
```

Generate a PNG
```shell
dot -Tpng mygraph.dot -o mygraph.png
```

Scale the PNG
```shell
dot -Tpng mygraph.dot -s=10 -o mygraph.png
```

Export to SVG
```shell
dot -Tsvg mygraph.dot -o mygraph.svg
```

---

## Nodes

:::: {.columns}

::: {.column width="70%"}
```dot
digraph g {
  rankdir=LR
  // default label is variable name
  seed // default shape is ellipse
  flower [label="Rose"]
  acorn [label="Acorn" shape="square"]
  tree [label="Tree" shape="rectangle"]
  forest [label="Forest" shape="circle"]
}
```
::: 

::: {.column width="30%"}
```{dot}
//| fig-width: 3
digraph g {
  rankdir=LR
  seed
  flower [label="Rose"]
  acorn [label="Acorn" shape="square"]
  tree [label="Tree" shape="rectangle"]
  forest [label="Forest" shape="circle"]
}
```

:::

::::

---

## Edges

:::: {.columns}

::: {.column width="70%"}
```dot
digraph g {
  client [label="client"]
  load_balancer [label="load\nbalancer"]
  server [label="server"]
  db [shape="cylinder" label="db"]
  files [shape="folder" label="file\nbucket"]

  client -> load_balancer [label="request"]
  load_balancer -> server [label="route"]
  server -> {
    files
    db
  } [label="request"]
}
```
:::

::: {.column width="30%"}
```{dot}
//| fig-width: 3
digraph g {
  client [label="client"]
  load_balancer [label="load\nbalancer"]
  server [label="server"]
  db [shape="cylinder" label="db"]
  files [shape="folder" label="file\nbucket"]

  client -> load_balancer [label="request"]
  load_balancer -> server [label="route"]
  server -> {
    files
    db
  } [label="request"]
}
```
:::

::::

---

## Subgraphs

:::: {.columns}

::: {.column width="70%"}
```dot
digraph g {
  rankdir=LR
  subgraph cluster_unary_functions {
    label="Unary Functions"
    negation [label="Negation"]
    identity [label="Identity"]
  }
  subgraph cluster_binary_functions {
    label="Binary Functions"
    and [label="And"]
    or [label="Or"]
  }
}
```
::: 

::: {.column width="30%"}
```{dot}
//| fig-width: 3
digraph g {
  rankdir=LR
  subgraph cluster_unary_functions {
    label="Unary Functions"
    negation [label="Negation"]
    identity [label="Identity"]
  }
  subgraph cluster_binary_functions {
    label="Binary Functions"
    and [label="And"]
    or [label="Or"]
  }
}
```
:::

::::

---

## Styling

```dot
digraph g {
    rankdir=LR
    node [colorscheme=pastel25]
    praecoquum [shape="rectangle" style=filled fillcolor="1" label="praecoquum\n------\nLate Latin\nearly-ripening apples"]
    praecocia [shape="rectangle" style=filled fillcolor="1" label="praecocia\n------\nLate Latin\nearly-ripening peaches"]
    praekokion [shape="rectangle" style=filled fillcolor="2" label="πραικόκιον\npraekokion\n------\nAncient Greek\napricot"]
    berikokkia [shape="rectangle" style=filled fillcolor="2" label="βερικοκκία\nberikokkia\n------\nByzantine Greek\napricot tree"]
    albarqūq [shape="rectangle" style=filled fillcolor="3" label="الْبَرْقُوق\nal-barqūq\n------\nArabic\nplums"]
    albercoc [shape="rectangle" style=filled fillcolor="4" label="albercoc\n------\nCatalan\napricot"]
    abrecoc [shape="rectangle" style=filled fillcolor="4" label="abrecoc\n------\ndialectical Catalan\napricot"]
    apricum [shape="rectangle" style=filled fillcolor="1" label="apricum\n------\nLatin\nsunny place"]
    abrecock [shape="rectangle" style=filled fillcolor="5" label="abrecock\n------\nEnglish\nobsolete form of apricot"]
    abricot [shape="rectangle" style=filled fillcolor="4" label="abricot\n------\nFrench\napricot"]
    apricock [shape="rectangle" style=filled fillcolor="5" label="apricock\n------\nEnglish\narchaic form of apricot"]
    apricot [shape="rectangle" style=filled fillcolor="5" label="apricot"]

    praecoquum -> praecocia
    praecocia -> praekokion
    praekokion -> berikokkia
    berikokkia -> albarqūq
    albarqūq -> albercoc
    albercoc -> abrecoc [label="dialectical\nvariation"]
    abrecoc -> abrecock
    apricum -> apricock [label="influenced"]
    abrecock -> apricock [label="alteration"]

    abricot -> apricot [label="influenced"]
    apricock -> apricot
}
```

See: [Wiktionary - Apricot](https://en.wiktionary.org/wiki/apricot)

---

## The History of the Apricot

```{dot}
//| fig-height: 6
digraph g {
    rankdir=LR
    node [colorscheme=pastel25]
    praecoquum [shape="rectangle" style=filled fillcolor="1" label="praecoquum\n------\nLate Latin\nearly-ripening apples"]
    praecocia [shape="rectangle" style=filled fillcolor="1" label="praecocia\n------\nLate Latin\nearly-ripening peaches"]
    praekokion [shape="rectangle" style=filled fillcolor="2" label="πραικόκιον\npraekokion\n------\nAncient Greek\napricot"]
    berikokkia [shape="rectangle" style=filled fillcolor="2" label="βερικοκκία\nberikokkia\n------\nByzantine Greek\napricot tree"]
    albarqūq [shape="rectangle" style=filled fillcolor="3" label="الْبَرْقُوق\nal-barqūq\n------\nArabic\nplums"]

    praecoquum -> praecocia
    praecocia -> praekokion
    praekokion -> berikokkia
    berikokkia -> albarqūq
}
```

---

## The History of the Apricot

```{dot}
//| fig-height: 6
digraph g {
    rankdir=LR
    node [colorscheme=pastel25]
    albarqūq [shape="rectangle" style=filled fillcolor="3" label="الْبَرْقُوق\nal-barqūq\n------\nArabic\nplums"]
    albercoc [shape="rectangle" style=filled fillcolor="4" label="albercoc\n------\nCatalan\napricot"]
    abrecoc [shape="rectangle" style=filled fillcolor="4" label="abrecoc\n------\ndialectical Catalan\napricot"]
    apricum [shape="rectangle" style=filled fillcolor="1" label="apricum\n------\nLatin\nsunny place"]
    abrecock [shape="rectangle" style=filled fillcolor="5" label="abrecock\n------\nEnglish\nobsolete form of apricot"]
    abricot [shape="rectangle" style=filled fillcolor="4" label="abricot\n------\nFrench\napricot"]
    apricock [shape="rectangle" style=filled fillcolor="5" label="apricock\n------\nEnglish\narchaic form of apricot"]
    apricot [shape="rectangle" style=filled fillcolor="5" label="apricot"]
    
    albarqūq
    albarqūq -> albercoc
    albercoc -> abrecoc [label="dialectical\nvariation"]
    abrecoc -> abrecock
    apricum -> apricock [label="influenced"]
    abrecock -> apricock [label="alteration"]

    abricot -> apricot [label="influenced"]
    apricock -> apricot
}
```

---

## The History of the Apricot

![Apricot History Map](apricot-map.png)

---

### A Reprise on Rhetoric and Storytelling

::: {.fragment }
- Visualizations should be appropriate to the subject
- Use analogies from reading
- Weak form of Sapir Whorf
- Majority of world languages
  - (notable exceptions: Hebrew, Arabic)
::: 

Structure Narrative

::: {.fragment }
- Left-to-Right
- Top-to-Bottom
- Clockwise
:::

---

## Putting Things Together - Supply Chain Example

```dot
digraph G {
    rankdir="LR"
    ratio=auto
    ranksep=auto

    label="Sculpting Supply Store"
    labelloc="t"

    // Nodes
    subgraph cluster_supply_chain {
        label="Supply Chain"
        style=rounded
        style=filled
        pencolor="#AEB6BE"
        bgcolor="#E5F5FD"
        subgraph cluster_raw_materials {
            label="Raw Materials"
            style=rounded
            style=filled
            pencolor="#AEB6BE"
            bgcolor="#EBF3E7"
            mine [label="Mine"]
        }
        subgraph cluster_clay_supply {
            label="Clay"
            style=rounded
            style=filled
            pencolor="#AEB6BE"
            bgcolor="#EBF3E7"
            clay_supplier [label="Clay\nSupplier"]
        }
        subgraph cluster_tool_supply {
            label="Tools"
            style=rounded
            style=filled
            pencolor="#AEB6BE"
            bgcolor="#EBF3E7"
            tool_manufacturer [label="Tool\nManufacturer"]
            tool_supplier [label="Tool\nSupplier"]

            tool_manufacturer -> tool_supplier [label="Provides"]
        }

        mine -> tool_manufacturer [label="Provides"]
    }
    subgraph cluster_store {
        label="Store"
        style=rounded
        style=filled
        pencolor="#AEB6BE"
        bgcolor="#E5F5FD"
        subgraph cluster_inventory {
            label="Inventory"
            style=rounded
            style=filled
            pencolor="#AEB6BE"
            bgcolor="#EBF3E7"
            clay_inventory [label="Clay\nInventory"]
            tool_inventory [label="Tool\nInventory"]
        }
        subgraph cluster_staff {
            label="Staff"
            style=rounded
            style=filled
            pencolor="#AEB6BE"
            bgcolor="#EBF3E7"
            clerk [label="Clerk"]
            general_manager [label="General\nManager"]
            general_manager -> clerk [label="supports"]
        }
    }

    // Edges
    mine -> clay_supplier [label="Provides"]
    clay_supplier -> clay_inventory [label="Restocks"]
    tool_supplier -> tool_inventory [label="Restocks"]

    clerk -> clay_inventory [label="Manages"]
    clerk -> tool_inventory [label="Manages"]

    general_manager -> clay_supplier [label="Coordinates\nwith"]
    general_manager -> tool_supplier [label="Coordinates\nwith"]
}
```

---

```{dot}
//| fig-height: 6
digraph G {
    rankdir="LR"
    ratio=auto
    ranksep=auto

    label="Sculpting Supply Store"
    labelloc="t"

    // Nodes
    subgraph cluster_supply_chain {
        label="Supply Chain"
        style=rounded
        style=filled
        pencolor="#AEB6BE"
        bgcolor="#E5F5FD"
        subgraph cluster_raw_materials {
            label="Raw Materials"
            style=rounded
            style=filled
            pencolor="#AEB6BE"
            bgcolor="#EBF3E7"
            mine [label="Mine"]
        }
        subgraph cluster_clay_supply {
            label="Clay"
            style=rounded
            style=filled
            pencolor="#AEB6BE"
            bgcolor="#EBF3E7"
            clay_supplier [label="Clay\nSupplier"]
        }
        subgraph cluster_tool_supply {
            label="Tools"
            style=rounded
            style=filled
            pencolor="#AEB6BE"
            bgcolor="#EBF3E7"
            tool_manufacturer [label="Tool\nManufacturer"]
            tool_supplier [label="Tool\nSupplier"]

            tool_manufacturer -> tool_supplier [label="Provides"]
        }

        mine -> tool_manufacturer [label="Provides"]
    }
    subgraph cluster_store {
        label="Store"
        style=rounded
        style=filled
        pencolor="#AEB6BE"
        bgcolor="#E5F5FD"
        subgraph cluster_inventory {
            label="Inventory"
            style=rounded
            style=filled
            pencolor="#AEB6BE"
            bgcolor="#EBF3E7"
            clay_inventory [label="Clay\nInventory"]
            tool_inventory [label="Tool\nInventory"]
        }
        subgraph cluster_staff {
            label="Staff"
            style=rounded
            style=filled
            pencolor="#AEB6BE"
            bgcolor="#EBF3E7"
            clerk [label="Clerk"]
            general_manager [label="General\nManager"]
            general_manager -> clerk [label="supports"]
        }
    }

    // Edges
    mine -> clay_supplier [label="Provides"]
    clay_supplier -> clay_inventory [label="Restocks"]
    tool_supplier -> tool_inventory [label="Restocks"]

    clerk -> clay_inventory [label="Manages"]
    clerk -> tool_inventory [label="Manages"]

    general_manager -> clay_supplier [label="Coordinates\nwith"]
    general_manager -> tool_supplier [label="Coordinates\nwith"]
}
```

---

## Orientation Matters

```dot
digraph G {
    rankdir="BT"
    ratio=1
    ranksep=auto

    label="Sculpting Supply Store"
    labelloc="t"

    // Nodes
    subgraph cluster_supply_chain {
        label="Supply Chain"
        style=rounded
        style=filled
        pencolor="#AEB6BE"
        bgcolor="#E5F5FD"
        subgraph cluster_raw_materials {
            label="Raw Materials"
            style=rounded
            style=filled
            pencolor="#AEB6BE"
            bgcolor="#EBF3E7"
            mine [label="Mine"]
        }
        subgraph cluster_clay_supply {
            label="Clay"
            style=rounded
            style=filled
            pencolor="#AEB6BE"
            bgcolor="#EBF3E7"
            clay_supplier [label="Clay\nSupplier"]
        }
        subgraph cluster_tool_supply {
            label="Tools"
            style=rounded
            style=filled
            pencolor="#AEB6BE"
            bgcolor="#EBF3E7"
            tool_manufacturer [label="Tool\nManufacturer"]
            tool_supplier [label="Tool\nSupplier"]

            tool_manufacturer -> tool_supplier [label="Provides"]
        }

        mine -> tool_manufacturer [label="Provides"]
    }
    subgraph cluster_store {
        label="Store"
        style=rounded
        style=filled
        pencolor="#AEB6BE"
        bgcolor="#E5F5FD"
        subgraph cluster_inventory {
            label="Inventory"
            style=rounded
            style=filled
            pencolor="#AEB6BE"
            bgcolor="#EBF3E7"
            clay_inventory [label="Clay\nInventory"]
            tool_inventory [label="Tool\nInventory"]
        }
        subgraph cluster_staff {
            label="Staff"
            style=rounded
            style=filled
            pencolor="#AEB6BE"
            bgcolor="#EBF3E7"
            clerk [label="Clerk"]
            general_manager [label="General\nManager"]
            general_manager -> clerk [label="supports"]
        }
    }

    // Edges
    mine -> clay_supplier [label="Provides"]
    clay_supplier -> clay_inventory [label="Restocks"]
    tool_supplier -> tool_inventory [label="Restocks"]

    clerk -> clay_inventory [label="Manages"]
    clerk -> tool_inventory [label="Manages"]

    general_manager -> clay_supplier [label="Coordinates\nwith"]
    general_manager -> tool_supplier [label="Coordinates\nwith"]
}
```

---

```{dot}
//| fig-height: 6
digraph G {
    rankdir="BT"
    ratio=1
    ranksep=auto

    label="Sculpting Supply Store"
    labelloc="t"

    // Nodes
    subgraph cluster_supply_chain {
        label="Supply Chain"
        style=rounded
        style=filled
        pencolor="#AEB6BE"
        bgcolor="#E5F5FD"
        subgraph cluster_raw_materials {
            label="Raw Materials"
            style=rounded
            style=filled
            pencolor="#AEB6BE"
            bgcolor="#EBF3E7"
            mine [label="Mine"]
        }
        subgraph cluster_clay_supply {
            label="Clay"
            style=rounded
            style=filled
            pencolor="#AEB6BE"
            bgcolor="#EBF3E7"
            clay_supplier [label="Clay\nSupplier"]
        }
        subgraph cluster_tool_supply {
            label="Tools"
            style=rounded
            style=filled
            pencolor="#AEB6BE"
            bgcolor="#EBF3E7"
            tool_manufacturer [label="Tool\nManufacturer"]
            tool_supplier [label="Tool\nSupplier"]

            tool_manufacturer -> tool_supplier [label="Provides"]
        }

        mine -> tool_manufacturer [label="Provides"]
    }
    subgraph cluster_store {
        label="Store"
        style=rounded
        style=filled
        pencolor="#AEB6BE"
        bgcolor="#E5F5FD"
        subgraph cluster_inventory {
            label="Inventory"
            style=rounded
            style=filled
            pencolor="#AEB6BE"
            bgcolor="#EBF3E7"
            clay_inventory [label="Clay\nInventory"]
            tool_inventory [label="Tool\nInventory"]
        }
        subgraph cluster_staff {
            label="Staff"
            style=rounded
            style=filled
            pencolor="#AEB6BE"
            bgcolor="#EBF3E7"
            clerk [label="Clerk"]
            general_manager [label="General\nManager"]
            general_manager -> clerk [label="supports"]
        }
    }

    // Edges
    mine -> clay_supplier [label="Provides"]
    clay_supplier -> clay_inventory [label="Restocks"]
    tool_supplier -> tool_inventory [label="Restocks"]

    clerk -> clay_inventory [label="Manages"]
    clerk -> tool_inventory [label="Manages"]

    general_manager -> clay_supplier [label="Coordinates\nwith"]
    general_manager -> tool_supplier [label="Coordinates\nwith"]
}
```


- Inappropriate orientation and aspect ratio
- Conspicuous when they are wrong

---

## Challenges Presented by Styling

- Analogous to CSS
- No built-in variable support

---

CSS
```css
body {
  font: 100% Helvetica, sans-serif;
  color: #333;
}
```

SCSS
```scss
$font-stack: Helvetica, sans-serif;
$primary-color: #333;

body {
  font: 100% $font-stack;
  color: $primary-color;
}
```

Source: [SCSS Documentation](https://sass-lang.com/guide/)

---

## React Native

```typescript
import React from 'react';
import {StyleSheet, Text} from 'react-native';
import {
  SafeAreaView,
  SafeAreaProvider
} from 'react-native-safe-area-context';

const App = () => (
  <SafeAreaProvider>
    <SafeAreaView style={styles.container}>
      <Text style={styles.title}>React Native</Text>
    </SafeAreaView>
  </SafeAreaProvider>
);

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 24,
    backgroundColor: '#eaeaea',
  },
  title: {
    marginTop: 16,
    paddingVertical: 8,
    borderWidth: 4,
    borderColor: '#20232a',
    borderRadius: 6,
    backgroundColor: '#61dafb',
    color: '#20232a',
    textAlign: 'center',
    fontSize: 30,
    fontWeight: 'bold',
  },
});

export default App;
```
Source: [React Native Docs - Stylesheet](https://reactnative.dev/docs/stylesheet)

---

## Lightweight Solutions

- IDE Snippets
- Preprocessors

---

### IDE Snippets

- VSCode User Defined Snippets
  - [code.visualstudio.com](https://code.visualstudio.com/docs/editing/userdefinedsnippets)

---

![VSCode Open Configure Snippets](vscode-open-configure-snippets.png)

---

![VSCode Open Snippets File](vscode-open-snippets-file.png)

---

![VSCode Snippet Graph Template](vscode-snippet-graph-template.png)

---

![VSCode Snippet Cluster Colors](vscode-snippet-cluster-colors.png)

---

### Preprocessors

- Write a script in a lightweight language like
  - Bash
  - Perl
  - Python

- Script would do text parsing and replacement

---

### More Robust Solution - Wrap in a Language
  - Python
    - [diagrams.mingrammer.com](https://diagrams.mingrammer.com/)
    - [github.com/xflr6/graphviz](https://github.com/xflr6/graphviz)
  - Go
    - [github.com/goccy/go-graphviz](https://github.com/goccy/go-graphviz)
    - [github.com/marqeta/go-dfd/](https://github.com/marqeta/go-dfd/)
  - Javascript
    - [github.com/mdaines/viz-js](https://github.com/mdaines/viz-js)

## Uses and Integration with Tools

- Read from DB to Dynamically Generate Graphs
- Integrate into documentation
- Real-time collaboration
- Other programmatic manipulation
  - [networkx](https://github.com/networkx/networkx)

Add to

- READMEs
- Plain-Text Knowledge Management Systems

---

## Codebase Inspection

### Go-Callvis

- Using this: [github.com/ondrajz/go-callvis](github.com/ondrajz/go-callvis)
- On this: [github.com/sikozonpc/ecom](https://github.com/sikozonpc/ecom)

### Crabviz

- Interactive Graphs: [github.com/chanhx/crabviz](https://github.com/chanhx/crabviz)

---

## Go Callvis - Codebase Inspection

```shell
go-callvis -file ecom -graphviz cmd/main.go
```
```{dot}
digraph gocallvis {
    label="";
    labeljust="l";
    fontname="Arial";
    fontsize="14";
    rankdir="LR";
    bgcolor="lightgray";
    style="solid";
    penwidth="0.5";
    pad="0.0";
    nodesep="0.35";

    node [shape="box" style="filled,rounded" fillcolor="honeydew" fontname="Verdana" penwidth="1.0" margin="0.16,0.0"];
    edge [minlen="2"]

    subgraph "cluster_focus" {
        bgcolor="#e6ecfa";
label="main";
labelloc="t";
labeljust="c";
fontsize="18";
        
        "command-line-arguments.initStorage" [ fillcolor="lightblue" label="initStorage" penwidth="0.5" tooltip="command-line-arguments.initStorage | defined in main.go:38\nat main.go:41: calling [log.Fatal]\nat main.go:39: calling [(*database/sql.DB).Ping]\nat main.go:44: calling [log.Println]" ]
        "command-line-arguments.main" [ fillcolor="lightblue" label="main" penwidth="0.5" tooltip="command-line-arguments.main | defined in main.go:14\nat main.go:30: calling [command-line-arguments.initStorage]\nat main.go:32: calling [github.com/sikozonpc/ecom/cmd/api.NewAPIServer]\nat main.go:25: calling [github.com/sikozonpc/ecom/db.NewMySQLStorage]\nat main.go:27: calling [log.Fatal]\nat main.go:34: calling [log.Fatal]\nat main.go:33: calling [(*github.com/sikozonpc/ecom/cmd/api.APIServer).Run]\nat main.go:32: calling [fmt.Sprintf]" ]
        
        subgraph "cluster_database/sql" {
        style="filled";
rank="sink";
URL="/?f=database/sql";
tooltip="package: database/sql";
penwidth="0.8";
fontsize="16";
fillcolor="#E0FFE1";
fontname="Tahoma bold";
label="database/sql";
        
        "(*database/sql.DB).Ping" [ fillcolor="#adedad" label="(*DB).Ping" penwidth="1.5" tooltip="(*database/sql.DB).Ping | defined in sql.go:916" ]
        
    }

        subgraph "cluster_fmt" {
        URL="/?f=fmt";
penwidth="0.8";
fontsize="16";
rank="sink";
label="fmt";
style="filled";
fillcolor="#E0FFE1";
fontname="Tahoma bold";
tooltip="package: fmt";
        
        "fmt.Sprintf" [ fillcolor="#adedad" label="Sprintf" penwidth="1.5" tooltip="fmt.Sprintf | defined in print.go:237" ]
        
    }

        subgraph "cluster_github.com/sikozonpc/ecom/cmd/api" {
        URL="/?f=github.com/sikozonpc/ecom/cmd/api";
penwidth="0.8";
fontsize="16";
style="filled";
fillcolor="lightyellow";
fontname="Tahoma bold";
rank="sink";
label="api";
tooltip="package: github.com/sikozonpc/ecom/cmd/api";
        
        "github.com/sikozonpc/ecom/cmd/api.NewAPIServer" [ fillcolor="moccasin" label="NewAPIServer" penwidth="1.5" tooltip="github.com/sikozonpc/ecom/cmd/api.NewAPIServer | defined in api.go:20" ]
        "(*github.com/sikozonpc/ecom/cmd/api.APIServer).Run" [ fillcolor="moccasin" label="(*APIServer).Run" penwidth="1.5" tooltip="(*github.com/sikozonpc/ecom/cmd/api.APIServer).Run | defined in api.go:27" ]
        
    }

        subgraph "cluster_github.com/sikozonpc/ecom/db" {
        fontsize="16";
rank="sink";
URL="/?f=github.com/sikozonpc/ecom/db";
tooltip="package: github.com/sikozonpc/ecom/db";
penwidth="0.8";
style="filled";
fillcolor="lightyellow";
fontname="Tahoma bold";
label="db";
        
        "github.com/sikozonpc/ecom/db.NewMySQLStorage" [ tooltip="github.com/sikozonpc/ecom/db.NewMySQLStorage | defined in db.go:10" fillcolor="moccasin" label="NewMySQLStorage" penwidth="1.5" ]
        
    }

        subgraph "cluster_log" {
        fillcolor="#E0FFE1";
label="log";
tooltip="package: log";
penwidth="0.8";
style="filled";
rank="sink";
URL="/?f=log";
fontsize="16";
fontname="Tahoma bold";
        
        "log.Fatal" [ penwidth="1.5" tooltip="log.Fatal | defined in log.go:422" fillcolor="#adedad" label="Fatal" ]
        "log.Println" [ tooltip="log.Println | defined in log.go:415" fillcolor="#adedad" label="Println" penwidth="1.5" ]
        
    }

    }

    "command-line-arguments.main" -> "command-line-arguments.initStorage" [ tooltip="at main.go:30: calling [command-line-arguments.initStorage]" ]
    "command-line-arguments.main" -> "github.com/sikozonpc/ecom/cmd/api.NewAPIServer" [ color="saddlebrown" tooltip="at main.go:32: calling [github.com/sikozonpc/ecom/cmd/api.NewAPIServer]" ]
    "command-line-arguments.initStorage" -> "log.Fatal" [ color="saddlebrown" tooltip="at main.go:41: calling [log.Fatal]" ]
    "command-line-arguments.main" -> "github.com/sikozonpc/ecom/db.NewMySQLStorage" [ color="saddlebrown" tooltip="at main.go:25: calling [github.com/sikozonpc/ecom/db.NewMySQLStorage]" ]
    "command-line-arguments.main" -> "log.Fatal" [ color="saddlebrown" tooltip="at main.go:27: calling [log.Fatal]\nat main.go:34: calling [log.Fatal]" ]
    "command-line-arguments.main" -> "(*github.com/sikozonpc/ecom/cmd/api.APIServer).Run" [ color="saddlebrown" tooltip="at main.go:33: calling [(*github.com/sikozonpc/ecom/cmd/api.APIServer).Run]" ]
    "command-line-arguments.initStorage" -> "(*database/sql.DB).Ping" [ color="saddlebrown" tooltip="at main.go:39: calling [(*database/sql.DB).Ping]" ]
    "command-line-arguments.initStorage" -> "log.Println" [ color="saddlebrown" tooltip="at main.go:44: calling [log.Println]" ]
    "command-line-arguments.main" -> "fmt.Sprintf" [ color="saddlebrown" tooltip="at main.go:32: calling [fmt.Sprintf]" ]
}
```


---

## Crabviz - Codebase Inspection

![Crabviz - Codebase Inspection](https://raw.githubusercontent.com/chanhx/assets/a62015f1ee792dd57d756f106a9e48815f106ee3/crabviz/preview.gif)


---

## Obsidian

- Knowledge management system built-around plain-text
- Uses text processing of markdown files
- [obsidian.md](https://obsidian.md/)

---

![Obsidian Inline Graphviz](obsidian-inline-graphviz.png)

---

![Obsidian Community Plugins - Graphviz](obsidian-community-plugins-graphviz.png)

---

![Obsidian Graph View](obsidian-graph-view.png)

---

![Obsidian Graph View - Filtered to Tag](obsidian-graph-view-filtered-to-tag.png)

# Other Visualizations

# Enter, Mermaid

---

## Hello, Mermaid

- Other visualization tasks
- Frequent native support in Markdown tools
- Different rendering style, implications for complicated graphs

- [mermaid.js.org](https://mermaid.js.org/intro/)

---

## Example: Sequence Diagrams

```mermaid
sequenceDiagram
autonumber
Alice->>John: Hello John, how are you?
loop HealthCheck
    John->>John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John-->>Alice: Great!
John->>Bob: How about you?
Bob-->>John: Jolly good!
```

Source: [mermaid.js.org](https://mermaid.js.org/syntax/sequenceDiagram.html#sequencenumbers)

---

## Example: Sequence Diagrams

```{mermaid}
sequenceDiagram
autonumber
Alice->>John: Hello John, how are you?
loop HealthCheck
    John->>John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John-->>Alice: Great!
John->>Bob: How about you?
Bob-->>John: Jolly good!
```

---

![Obsidian Inline Mermaid](obsidian-inline-mermaid.png)

---

## Example: Entity Relationship Diagram

```mermaid
erDiagram
    direction LR
    CUSTOMER ||--o{ ORDER : places
    CUSTOMER {
        string name
        string custNumber
        string sector
    }
    ORDER ||--|{ LINE-ITEM : contains
    ORDER {
        int orderNumber
        string deliveryAddress
    }
    LINE-ITEM {
        string productCode
        int quantity
        float pricePerUnit
    }
```


---

## Example: Entity Relationship Diagram

```{mermaid}
erDiagram
    direction LR
    CUSTOMER ||--o{ ORDER : places
    CUSTOMER {
        string name
        string custNumber
        string sector
    }
    ORDER ||--|{ LINE-ITEM : contains
    ORDER {
        int orderNumber
        string deliveryAddress
    }
    LINE-ITEM {
        string productCode
        int quantity
        float pricePerUnit
    }
```

- See: [Crow's Foot Notation](https://en.wikipedia.org/wiki/Entity%E2%80%93relationship_model#Crow's_foot_notation)

---

:::: {.columns}

::: {.column width="50%"}
![jllovet.com](qr_jllovet_com.png){width=50%}
::: 

::: {.column width="50%"}
![slides](qr_slides.png){width=50%}
:::

::::