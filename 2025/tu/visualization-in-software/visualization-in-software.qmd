---
title: "Visualization in Software"
format:
  revealjs:
    theme: serif
jupyter: python3
self-contained: true
---

# Prelude

---

## Jonathan Llovet

:::: {.columns}

::: {.column width="80%"}

- Software Engineer, Linguist, Philosopher
:::

::: {.column width="20%"}
![](https://avatars.githubusercontent.com/u/36782355?v=4)

[jllovet.com](jllovet.com)

:::

::::

---

## Jonathan Llovet

:::: {.columns}

::: {.column width="80%"}

School

- BA from St. John's College, studied Philosophy and History of Math and Science
- Enrolled in MS in CS at Towson University
- Summer Language School in Hebrew at Middlebury University
- Coursework at Indiana Univ. East in Math
- Other language programs - classical and modern

:::

::: {.column width="20%"}
![](https://avatars.githubusercontent.com/u/36782355?v=4)

[jllovet.com](jllovet.com)

:::

::::
---

## Jonathan Llovet

:::: {.columns}

::: {.column width="80%"}

Work

- Solutions Architect and Cybersecurity Manager at *Inspire Brands*
- Founder and CEO of *Opening Questions*, where I'm building a language learning app for Ancient Greek called *Talk with Albert*
- Formerly worked as a consultant in Identity and Access Management
- Writing a book on Philosophy of Computer Science: *Algorithmics - The Being of Becoming*

:::

::: {.column width="20%"}
![](https://avatars.githubusercontent.com/u/36782355?v=4)

[jllovet.com](jllovet.com)

:::

::::

# Why Talk About Visualization?

# What is Computation?

---

## Application of Algorithmics

::: {.fragment }
- Study of change and becoming, sister of calculus
:::

::: {.fragment }
- Transformation of initial state to a subsequent state
:::

::: {.fragment }
- Sometimes with side effects
:::

---

## Modeling and Analogy
::: {.fragment }
- Exploration (Questions & Discussions)
:::
::: {.fragment }
- Instrumentalization (Means to an End)
:::
::: {.fragment }
- Commodification (Product)
:::

---

At their core:

::: {.fragment }
- Communication and Collaboration
:::

We should be concerned with:

::: {.fragment }
- Rhetoric
- Effective Presentation
:::

---

## Our Audiences

::: {.fragment }
- The Computer
:::
::: {.fragment }
- Other Software Engineers
:::
::: {.fragment }
- Colleagues
:::
::: {.fragment }
- Customers
:::
::: {.fragment }
- Ourselves
:::


---

## Effective Communication

::: {.fragment }
- Fundamental aspects of our cognition:
  - Space and Time
:::

::: {.fragment }
- Frame communication around these

  ::: {.fragment }
  - Allow audience to explore concepts spatially
  :::
  ::: {.fragment }
  - Tell a story
  :::
:::


# Enter, Graphviz

---

## Hello, Graphviz!
:::: {.columns}

::: {.column width="40%"}
```dot
digraph g {
  a -> b
}
```
```{dot}
//| fig-height: 4
//| fig-width: 4
digraph g {
  a -> b
}
```
:::

::: {.column width="60%"}
- Declarative graph-generation
- Plain text files ending in .dot
- Processed by CLI or another tool
:::

::::

---

## Hello, Graphviz!
:::: {.columns}

::: {.column width="40%"}
```dot
digraph g {
  rankdir=LR
  a -> b
}
```
```{dot}
//| fig-height: 4
//| fig-width: 4
digraph g {
  rankdir=LR
  a -> b
}
```
:::

::: {.column width="60%"}
- Easy modification and iteration
- Effective for collaboration
- [VSCode Plugin](https://github.com/joaompinto/vscode-graphviz) for live updates
:::

::::

---

## Graphviz Resources

- [Graphviz: graphviz.org/download](https://graphviz.org/download/)
- [VSCode: github.com/joaompinto/vscode-graphviz](https://github.com/joaompinto/vscode-graphviz)
- [Docs: graphviz.org](https://graphviz.org/)
- [Gitlab: gitlab.com/graphviz/graphviz](https://gitlab.com/graphviz/graphviz)

---

## Basic Usage

`mygraph.dot`
```dot
digraph g {
  a -> b
}
```

Generate a PNG
```shell
dot -Tpng mygraph.dot -o mygraph.png
```

Scale the PNG
```shell
dot -Tpng mygraph.dot -s=10 -o mygraph.png
```

Export to SVG
```shell
dot -Tsvg mygraph.dot -o mygraph.svg
```

---

## Nodes

---

## Edges

---

## Subgraphs

---

### A Reprise on Rhetoric and Storytelling

::: {.fragment }
- Use analogies from reading
- Weak form of Sapir Whorf
- Majority of world languages
  - (notable exceptions: Hebrew, Arabic)
::: 

Structure Narrative

::: {.fragment }
- Left-to-Right
- Top-to-Bottom
- Clockwise
:::

---

## Styling

---

## Challenges Presented by Styling

- Analogous to CSS
- No built-in variable support

---

## Possible Solutions

- Possible Solutions
- Preprocessors
- IDE Snippets

---

### More Robust Solutions

- Wrappers in other languages
  - Python
  - Go
  - Javascript

## Integration with Other Tools

- Read from DB
- Integrate into documentation
- Real-time collaboration
- READMEs
- Obsidian

# Other Visualizations

# Enter, Mermaid

---

## Hello, Mermaid

- Other visualization tasks
- More frequent support in Markdown tools
- Different rendering style, implications for complicated graphs

---

## Example: Sequence Diagrams
- Sequence diagrams
